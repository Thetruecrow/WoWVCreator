
#define SKIP_ALLOCATOR_SHARING 1

#include <list>
#include <vector>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <fstream>
#include <iosfwd>
#include <search.h>
#include <fcntl.h>
#include <signal.h>

#ifdef WIN32
#include <windows.h>
#endif

#define SCRIPT_TYPE_ITEM_INFO 1
#define SCRIPT_TYPE_CREATURE_INFO 2
#define SCRIPT_TYPE_VENDOR_INFO 3
#define SCRIPT_TYPE_LOOT_INFO 4
#define SCRIPT_TYPE_SERVER_CONNECTOR 5

#define FIELDTYPE_INT 1
#define FIELDTYPE_CHAR 2
#define FIELDTYPE_FLOAT 3
#define BUILD_INFO_MAX_FIELDS 150

enum ItemBuildInfo
{
	 ITEM_BUILD_INFO_NAME = 0,
	 ITEM_BUILD_INFO_QUOTE,
	 ITEM_BUILD_INFO_QUALITY,
	 ITEM_BUILD_INFO_DISPLAY_ID,
	 ITEM_BUILD_INFO_ENTRY_ID,
	 ITEM_BUILD_INFO_INVENTORY_TYPE,
	 ITEM_BUILD_INFO_CLASS,
	 ITEM_BUILD_INFO_SUB_CLASS,
	 ITEM_BUILD_INFO_REPAIR_TYPE,
	 ITEM_BUILD_INFO_DURABILITY,
	 ITEM_BUILD_INFO_BINDTYPE,
	 ITEM_BUILD_INFO_SHEATH_TYPE,
	 ITEM_BUILD_INFO_AMMO_TYPE,
	 ITEM_BUILD_INFO_SPEED,
	 ITEM_BUILD_INFO_BLOCK,
	 ITEM_BUILD_INFO_ARMOR,
	 ITEM_BUILD_INFO_REQUIRED_LEVEL,
	 ITEM_BUILD_INFO_ITEM_LEVEL,
	 ITEM_BUILD_INFO_REQUIRED_FACTION,
	 ITEM_BUILD_INFO_REQUIRED_FACTION_LEVEL,
	 ITEM_BUILD_INFO_REQUIRED_SKILL,
	 ITEM_BUILD_INFO_REQUIRED_SKILL_LEVEL,
	 ITEM_BUILD_INFO_REQUIRED_SPELL,
	 ITEM_BUILD_INFO_UNIQUE,
	 ITEM_BUILD_INFO_MAX_STACK,
	 ITEM_BUILD_INFO_ALLOWABLE_CLASS,
	 ITEM_BUILD_INFO_ALLOWABLE_RACE,
	 ITEM_BUILD_INFO_DAMAGE_MIN_1,
	 ITEM_BUILD_INFO_DAMAGE_MAX_1,
	 ITEM_BUILD_INFO_DAMAGE_TYPE_1,
	 ITEM_BUILD_INFO_DAMAGE_MIN_2,
	 ITEM_BUILD_INFO_DAMAGE_MAX_2,
	 ITEM_BUILD_INFO_DAMAGE_TYPE_2,
	 ITEM_BUILD_INFO_STAT_TYPE_1,
	 ITEM_BUILD_INFO_STAT_VALUE_1,
	 ITEM_BUILD_INFO_STAT_TYPE_2,
	 ITEM_BUILD_INFO_STAT_VALUE_2,
	 ITEM_BUILD_INFO_STAT_TYPE_3,
	 ITEM_BUILD_INFO_STAT_VALUE_3,
	 ITEM_BUILD_INFO_STAT_TYPE_4,
	 ITEM_BUILD_INFO_STAT_VALUE_4,
	 ITEM_BUILD_INFO_STAT_TYPE_5,
	 ITEM_BUILD_INFO_STAT_VALUE_5,
	 ITEM_BUILD_INFO_STAT_TYPE_6,
	 ITEM_BUILD_INFO_STAT_VALUE_6,
	 ITEM_BUILD_INFO_STAT_TYPE_7,
	 ITEM_BUILD_INFO_STAT_VALUE_7,
	 ITEM_BUILD_INFO_STAT_TYPE_8,
	 ITEM_BUILD_INFO_STAT_VALUE_8,
	 ITEM_BUILD_INFO_STAT_TYPE_9,
	 ITEM_BUILD_INFO_STAT_VALUE_9,
	 ITEM_BUILD_INFO_STAT_TYPE_10,
	 ITEM_BUILD_INFO_STAT_VALUE_10,
	 ITEM_BUILD_INFO_HOLY_RESISTANCE,
	 ITEM_BUILD_INFO_FIRE_RESISTANCE,
	 ITEM_BUILD_INFO_NATURE_RESISTANCE,
	 ITEM_BUILD_INFO_FROST_RESISTANCE,
	 ITEM_BUILD_INFO_SHADOW_RESISTANCE,
	 ITEM_BUILD_INFO_ARCANE_RESISTANCE,
	 ITEM_BUILD_INFO_SPELLID_1,
	 ITEM_BUILD_INFO_SPELL_TRIGGER_1,
	 ITEM_BUILD_INFO_SPELL_CHARGES_1,
	 ITEM_BUILD_INFO_SPELL_COOLDOWN_1,
	 ITEM_BUILD_INFO_SPELL_CATEGORY_1,
	 ITEM_BUILD_INFO_SPELL_SPELL_CATEGORY_1,
	 ITEM_BUILD_INFO_SPELLID_2,
	 ITEM_BUILD_INFO_SPELL_TRIGGER_2,
	 ITEM_BUILD_INFO_SPELL_CHARGES_2,
	 ITEM_BUILD_INFO_SPELL_COOLDOWN_2,
	 ITEM_BUILD_INFO_SPELL_CATEGORY_2,
	 ITEM_BUILD_INFO_SPELL_SPELL_CATEGORY_2,
	 ITEM_BUILD_INFO_SPELLID_3,
	 ITEM_BUILD_INFO_SPELL_TRIGGER_3,
	 ITEM_BUILD_INFO_SPELL_CHARGES_3,
	 ITEM_BUILD_INFO_SPELL_COOLDOWN_3,
	 ITEM_BUILD_INFO_SPELL_CATEGORY_3,
	 ITEM_BUILD_INFO_SPELL_SPELL_CATEGORY_3,
	 ITEM_BUILD_INFO_SPELLID_4,
	 ITEM_BUILD_INFO_SPELL_TRIGGER_4,
	 ITEM_BUILD_INFO_SPELL_CHARGES_4,
	 ITEM_BUILD_INFO_SPELL_COOLDOWN_4,
	 ITEM_BUILD_INFO_SPELL_CATEGORY_4,
	 ITEM_BUILD_INFO_SPELL_SPELL_CATEGORY_4,
	 ITEM_BUILD_INFO_SPELLID_5,
	 ITEM_BUILD_INFO_SPELL_TRIGGER_5,
	 ITEM_BUILD_INFO_SPELL_CHARGES_5,
	 ITEM_BUILD_INFO_SPELL_COOLDOWN_5,
	 ITEM_BUILD_INFO_SPELL_CATEGORY_5,
	 ITEM_BUILD_INFO_SPELL_SPELL_CATEGORY_5,
	 ITEM_BUILD_INFO_SOCKET_TYPE_1,
	 ITEM_BUILD_INFO_SOCKET_TYPE_2,
	 ITEM_BUILD_INFO_SOCKET_TYPE_3,
	 ITEM_BUILD_INFO_SOCKET_BONUS,
	 ITEM_BUILD_INFO_SET_ID,
	 ITEM_BUILD_INFO_BUY_PRICE,
	 ITEM_BUILD_INFO_SELL_PRICE,
	 ITEM_BUILD_MAX
};

#define SET_INTFIELD(fieldnum, name) info->fieldinfo->fieldtype[fieldnum] = FIELDTYPE_INT; info->fieldinfo->fieldname[fieldnum] = name; if(info->maxfields <= fieldnum) info->maxfields = fieldnum+1;
#define SET_CHARFIELD(fieldnum, name) info->fieldinfo->fieldtype[fieldnum] = FIELDTYPE_CHAR; info->fieldinfo->fieldname[fieldnum] = name; if(info->maxfields <= fieldnum) info->maxfields = fieldnum+1;
#define SET_FLOATFIELD(fieldnum, name) info->fieldinfo->fieldtype[fieldnum] = FIELDTYPE_FLOAT; info->fieldinfo->fieldname[fieldnum] = name; if(info->maxfields <= fieldnum) info->maxfields = fieldnum+1;

struct FieldInfo
{
	FieldInfo()
	{
		memset(&fieldtype, 0, sizeof(int)*ITEM_BUILD_MAX);
		memset(&fieldname, 0, sizeof(char*)*ITEM_BUILD_MAX);
	}

	int fieldtype[ITEM_BUILD_MAX];
	char* fieldname[ITEM_BUILD_MAX];
};

struct InsertBuildInfo
{
	InsertBuildInfo(char* name, char* tablename)
	{
		BuildName = name;
		ItemTableName = tablename;
		maxfields = 0;
		fieldinfo = new FieldInfo();
	};

	InsertBuildInfo(char* name, char* tablename, unsigned int _maxfields, int* _fieldtype, char** _fieldname)
	{
		BuildName = name;
		ItemTableName = tablename;
		maxfields = _maxfields;
		fieldinfo = new FieldInfo();
	};

	char* BuildName;
	char* ItemTableName;
	unsigned int maxfields;
	FieldInfo* fieldinfo;
};

InsertBuildInfo* info = new InsertBuildInfo("ArcEmu > v2801", "items");

extern "C" __declspec(dllexport) int _exp_get_script_type()
{
	SET_CHARFIELD(ITEM_BUILD_INFO_NAME, "name1");
	SET_CHARFIELD(ITEM_BUILD_INFO_QUOTE, "description");
	SET_INTFIELD(ITEM_BUILD_INFO_QUALITY, "quality");
	SET_INTFIELD(ITEM_BUILD_INFO_DISPLAY_ID, "displayid");
	SET_INTFIELD(ITEM_BUILD_INFO_ENTRY_ID, "entry");
	SET_INTFIELD(ITEM_BUILD_INFO_CLASS, "class");
	SET_INTFIELD(ITEM_BUILD_INFO_SUB_CLASS, "subclass");
	SET_INTFIELD(ITEM_BUILD_INFO_REPAIR_TYPE, "lock_material");
	SET_INTFIELD(ITEM_BUILD_INFO_DURABILITY, "MaxDurability");
	SET_INTFIELD(ITEM_BUILD_INFO_BINDTYPE, "bonding");
	SET_INTFIELD(ITEM_BUILD_INFO_SHEATH_TYPE, "sheathID");
	SET_INTFIELD(ITEM_BUILD_INFO_AMMO_TYPE, "ammo_type");
	SET_INTFIELD(ITEM_BUILD_INFO_SPEED, "delay");
	SET_INTFIELD(ITEM_BUILD_INFO_BLOCK, "block");
	SET_INTFIELD(ITEM_BUILD_INFO_ARMOR, "armor");

	SET_INTFIELD(ITEM_BUILD_INFO_REQUIRED_LEVEL, "requiredlevel");
	SET_INTFIELD(ITEM_BUILD_INFO_ITEM_LEVEL, "itemlevel");

	SET_INTFIELD(ITEM_BUILD_INFO_REQUIRED_FACTION, "RequiredFaction");
	SET_INTFIELD(ITEM_BUILD_INFO_REQUIRED_FACTION_LEVEL, "RequiredFactionStanding");
	SET_INTFIELD(ITEM_BUILD_INFO_REQUIRED_SKILL, "RequiredSkill");
	SET_INTFIELD(ITEM_BUILD_INFO_REQUIRED_SKILL_LEVEL, "RequiredSkillRank");
	SET_INTFIELD(ITEM_BUILD_INFO_REQUIRED_SPELL, "RequiredSpell");

	SET_INTFIELD(ITEM_BUILD_INFO_UNIQUE, "Unique");
	SET_INTFIELD(ITEM_BUILD_INFO_MAX_STACK, "maxcount");

	SET_INTFIELD(ITEM_BUILD_INFO_ALLOWABLE_CLASS, "allowableclass");
	SET_INTFIELD(ITEM_BUILD_INFO_ALLOWABLE_RACE, "allowablerace");

	SET_INTFIELD(ITEM_BUILD_INFO_DAMAGE_MIN_1, "dmg_min1");
	SET_INTFIELD(ITEM_BUILD_INFO_DAMAGE_MAX_1, "dmg_max1");
	SET_INTFIELD(ITEM_BUILD_INFO_DAMAGE_TYPE_1, "dmg_type1");
	SET_INTFIELD(ITEM_BUILD_INFO_DAMAGE_MIN_2, "dmg_min2");
	SET_INTFIELD(ITEM_BUILD_INFO_DAMAGE_MAX_2, "dmg_max2");
	SET_INTFIELD(ITEM_BUILD_INFO_DAMAGE_TYPE_2, "dmg_type2");

	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_1, "stat_type1");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_1, "stat_value1");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_2, "stat_type2");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_2, "stat_value2");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_3, "stat_type3");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_3, "stat_value3");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_4, "stat_type4");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_4, "stat_value4");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_5, "stat_type5");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_5, "stat_value5");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_6, "stat_type6");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_6, "stat_value6");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_7, "stat_type7");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_7, "stat_value7");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_8, "stat_type8");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_8, "stat_value8");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_9, "stat_type9");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_9, "stat_value9");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_TYPE_10, "stat_type10");
	SET_INTFIELD(ITEM_BUILD_INFO_STAT_VALUE_10, "stat_value10");

	SET_INTFIELD(ITEM_BUILD_INFO_HOLY_RESISTANCE, "holy_res");
	SET_INTFIELD(ITEM_BUILD_INFO_FIRE_RESISTANCE, "fire_res");
	SET_INTFIELD(ITEM_BUILD_INFO_NATURE_RESISTANCE, "nature_res");
	SET_INTFIELD(ITEM_BUILD_INFO_FROST_RESISTANCE, "frost_res");
	SET_INTFIELD(ITEM_BUILD_INFO_SHADOW_RESISTANCE, "shadow_res");
	SET_INTFIELD(ITEM_BUILD_INFO_ARCANE_RESISTANCE, "arcane_res");

	SET_INTFIELD(ITEM_BUILD_INFO_SOCKET_TYPE_1, "socket_color_1");
	SET_INTFIELD(ITEM_BUILD_INFO_SOCKET_TYPE_2, "socket_color_2");
	SET_INTFIELD(ITEM_BUILD_INFO_SOCKET_TYPE_3, "socket_color_3");
	SET_INTFIELD(ITEM_BUILD_INFO_SOCKET_BONUS, "socket_bonus");

	SET_INTFIELD(ITEM_BUILD_INFO_SET_ID, "itemset");
	SET_INTFIELD(ITEM_BUILD_INFO_BUY_PRICE, "buyprice");
	SET_INTFIELD(ITEM_BUILD_INFO_SELL_PRICE, "sellprice");
	return SCRIPT_TYPE_ITEM_INFO; // 1 = BuildInfoDLL
}

extern "C" __declspec(dllexport) char* _exp_script_register()
{
	return info->BuildName;
}

extern "C" __declspec(dllexport) char* _exp_request_tablename()
{
	return info->ItemTableName;
}

extern "C" __declspec(dllexport) int _exp_request_fieldcount()
{
	return info->maxfields;
}

extern "C" __declspec(dllexport) FieldInfo* _exp_request_fieldinfo()
{
	return info->fieldinfo;
}

#ifdef WIN32

BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved )
{
	return TRUE;
}

#endif
